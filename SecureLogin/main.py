"""

Secure Login System

Developer: Fahad Riaz

Description:
This is a secure login system implemented in Python to access the Royal Holloway website. It provides a two-factor authentication
mechanism using OTP and QR code. Users can register with a username and password, and then use the
OTP generated by any Authenticator app on mobile to log in. The system ensures security by hashing
the passwords using the SHA-256 hashing algorithm and also by validating the username and password
through checks against provided criteria to make sure that the usernames and passwords are strong while registering.
The system is made more secure by giving the users only three attempts to log in.

This project utilizes the following libraries/packages: pyotp, qrcode, webbrowser, tkinter, and hashlib.

"""

import pyotp
import qrcode
import webbrowser as w
import tkinter as tk
from tkinter import messagebox, PhotoImage
import hashlib


userNames = []
passWords = []


def register(userName, passWord):
    if not userName.strip() or not passWord.strip():
        messagebox.showerror('Registration', 'PLEASE ENTER A USERNAME AND PASSWORD TO REGISTER')
    else:
        check1 = validate_username(userName)
        check2 = validate_password(passWord)
        if check1 is True and check2 is True:
            if userName in userNames:
                messagebox.showerror('Registration', 'USERNAME ALREADY TAKEN')
            else:
                hashed_password = hashlib.sha256(passWord.encode('utf-8')).hexdigest()
                userNames.append(userName)
                passWords.append(hashed_password)

                instructions = ('''
                                    SETTING UP TWO-FACTOR AUTHENTICATION:
                                    INSTRUCTIONS:
                                    1 - DOWNLOAD AND OPEN ANY AUTHENTICATOR APP ON YOUR OWN MOBILE DEVICE (RECOMMENDED ONE IS GOOGLE AUTH)
                                    2 - CLICK THE SCAN A QR CODE OPTION
                                    3 - A QR CODE HAS BEEN GENERATED FOR YOUR ACCOUNT ON YOUR SCREEN, SCAN IT TO ADD IT INTO THE APP
                                    4 - AFTER ADDING IT YOU HAVE SUCCESSFULLY REGISTERED, USE THE OTP CODE IN THE APP TO LOGIN TO YOUR ACCOUNT HERE

                                    YOU ONLY NEED TO ADD THE QR CODE ONCE IN THE APP WHILE REGISTERING.
                                    DON'T CLICK REGISTER AGAIN ONCE YOU HAVE ADDED THE QR CODE IN THE APP, JUST USE LOGIN AFTER THAT WHENEVER YOU WANT.
                                    CLICK 'OK' TO GET THE QR CODE ON THE SCREEN.


                                    ''')

                messagebox.showinfo('Registration', instructions)

                key = pyotp.random_base32(
                    length=32)  # using this method, random alphanumeric keys can be generated, this key will be used to generate OTP.
                with open(f'{userName}_key.txt', 'w') as file:
                    file.write(key)

                # creating a time based OTP:
                totp_auth = pyotp.totp.TOTP(key).provisioning_uri(name=userName, issuer_name='PROJECT BLACK')

                # generating a qr code for the link that gets created (totp_auth):
                qrcode.make(totp_auth).save(f'{userName}_qr.png')

                with open('data.txt', 'w') as file:
                    for username, password in zip(userNames, passWords):
                        file.write(f'{username},{password}\n')

                w.open(f'{userName}_qr.png')



def login():
    username = username_entry.get()
    password = password_entry.get()
    hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest()

    if not username.strip() or not password.strip():
        messagebox.showerror('Login', 'PLEASE ENTER A USERNAME AND PASSWORD TO LOGIN')
    else:
        if username in userNames:
            index = userNames.index(username)
            if hashed_password == passWords[index]:
                with open(f'{username}_key.txt', 'r') as file:
                    key = file.read().strip()
                with open(f'{username}_qr.png', 'rb') as file:
                    qrcode_img = file.read()
                otp = otp_entry.get()
                totp = pyotp.TOTP(key)
                if totp.verify(otp):
                    login_attempts.set(0)
                    messagebox.showinfo('Login', 'LOGIN SUCCESSFUL')
                    w.open('https://www.royalholloway.ac.uk/')
                else:
                    login_attempts.set(login_attempts.get()+1)
                    if login_attempts.get() == 3:
                        login_button.config(state=tk.DISABLED)
                    messagebox.showerror('Login', 'INVALID OTP')
            else:
                login_attempts.set(login_attempts.get() + 1)
                if login_attempts.get() == 3:
                    login_button.config(state=tk.DISABLED)
                messagebox.showerror('Login', 'INVALID PASSWORD')
        else:
            login_attempts.set(login_attempts.get() + 1)
            if login_attempts.get() == 3:
                login_button.config(state=tk.DISABLED)
            messagebox.showerror('Login', 'INVALID USERNAME')



def validate_username(username):
    if len(username) < 5 or len(username) > 15:
        messagebox.showerror('Registration', 'USERNAME SHOULD HAVE 5 TO 15 CHARACTERS')
        return False
    if not username.isalnum():
        messagebox.showerror('Registration', 'USERNAME SHOULD BE ALPHANUMERIC')
        return False
    return True



def validate_password(password):
    if len(password) < 8 or len(password) > 12:
        messagebox.showerror('Registration', 'PASSWORD SHOULD HAVE 8 TO 12 CHARACTERS')
        return False
    has_upper = False
    has_lower = False
    has_digit = False
    for char in password:
        if char.isupper():
            has_upper = True
        elif char.islower():
            has_lower = True
        elif char.isdigit():
            has_digit = True
    if not (has_digit and has_lower and has_upper):
        messagebox.showerror('Registration', 'PASSWORD SHOULD HAVE AT LEAST ONE UPPERCASE LETTER, ONE LOWERCASE LETTER AND ONE DIGIT')
        return False
    return True



try:
    with open('data.txt', 'r') as file:
        for line in file:
            username, password = line.strip().split(',')
            userNames.append(username)
            passWords.append(password)
except FileNotFoundError:
    pass


window = tk.Tk()
window.title('Secure Login System')
window.config(bg='#FCEDDA')

rhul_logo = PhotoImage(file='rhul.png')
info = '''WELCOME TO SECURE LOGIN SYSTEM FOR THE ROYAL HOLLOWAY WEBSITE
ENTER USERNAME AND PASSWORD TO REGISTER FIRST AND THEN LOGIN
IF YOU HAVE ALREADY REGISTERED ONCE BEFORE THEN JUST LOGIN USING YOUR DETAILS AND OTP CODE
YOU WILL ONLY HAVE 3 ATTEMPTS TO LOGIN'''

welcome_label_one = tk.Label(window, image=rhul_logo)
welcome_label_one.pack()

welcome_label_two = tk.Label(window, text=info, font=("Franklin Gothic", 13), bg='#FCEDDA')
welcome_label_two.pack()

username_label = tk.Label(window, text="Username:", bg='#FCEDDA')
username_label.pack()
username_entry = tk.Entry(window, bd=5)
username_entry.pack()

password_label = tk.Label(window, text="Password:", bg='#FCEDDA')
password_label.pack()
password_entry = tk.Entry(window, bd=5)
password_entry.pack()


login_button = tk.Button(window, text="Login", bg='#EE4E34', fg='#FCEDDA', command=login)
login_button.pack()
login_attempts = tk.IntVar()
login_attempts.set(0)

otp_label = tk.Label(window, text="OTP code:", bg='#FCEDDA')
otp_label.pack()
otp_entry = tk.Entry(window, bd=5)
otp_entry.pack()

register_button = tk.Button(window, text="Register", bg='#EE4E34', fg='#FCEDDA', command=lambda: register(username_entry.get(), password_entry.get()))
register_button.pack()

window.mainloop()













